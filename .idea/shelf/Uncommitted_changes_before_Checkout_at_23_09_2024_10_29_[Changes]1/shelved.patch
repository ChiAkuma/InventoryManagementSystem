Index: src/main/java/de/fm/InventoryManagementSystem/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.fm.InventoryManagementSystem;\r\n\r\nimport de.fm.database.Database;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Scanner;\r\n\r\npublic class Inventory {\r\n\r\n    private Database db = null;\r\n\r\n    public Inventory(Database db) {\r\n        this.db = db;\r\n    }\r\n\r\n    /**\r\n     * Lagert ein Item ein welches man eingibt.\r\n     * Wenn das Item im Lager ist wird dieses einfach addiert\r\n     * Sollte es nicht im Lager sein wird es als neues hinzugefügt\r\n     */\r\n    private void einlagern() {\r\n        System.out.println(\"Einlagerungsprozess gestartet\");\r\n        Scanner scanner1 = new Scanner(System.in);\r\n\r\n        try {\r\n            System.out.println(\"Name des Artikels eingeben\");\r\n            String artikelname = scanner1.nextLine();\r\n            System.out.println(\"Anzahl der Artikel eingeben\");\r\n            int stueckzahl = scanner1.nextInt();\r\n\r\n            //fragt erstmal ab ob das item im lager existiert\r\n            String sql = \"SELECT ArtikelName FROM lager WHERE ArtikelName='\" + artikelname + \"';\";\r\n            System.out.println(sql);\r\n            ResultSet rs = this.db.executeSQL(sql);\r\n\r\n            String sqlBefehl = \"\";\r\n            // Wenn bei der Abfrage nichts gefunden wurde mache einen insert\r\n            if (!rs.isBeforeFirst()) {\r\n                System.out.println(\"Artikel nicht im Lager vorhanden bitte weitere Daten angeben\");\r\n\r\n                //Frage noch offene Daten ab für die Datenbank\r\n                //neuen scanner öffnen weil sonst irgendwie fehler im lesen entsteht\r\n                Scanner x = new Scanner(System.in);\r\n                System.out.print(\"Beschreibung hinzufügen: \");\r\n                String beschreibung = x.nextLine();\r\n                System.out.print(\"Preis hinzufügen: \");\r\n                String preis = x.nextLine();\r\n                //ersetze beim preis ein , komma direkt zu einem . punkt\r\n                preis = preis.replace(\",\", \".\");\r\n                System.out.print(\"Lagerort hinzufügen: \");\r\n                String lagerort = x.nextLine();\r\n\r\n                //Der sql befehl um ein item hinzuzufügen\r\n                sqlBefehl = \"INSERT INTO lager (ArtikelName, Beschreibung, Bestand, Preis, Lagerort) VALUES ('\" + artikelname + \"', '\" + beschreibung + \"', \" + stueckzahl + \", \" + preis + \", '\" + lagerort + \"');\";\r\n            } else {\r\n                //Wenn bei der Abfrage etwas gefunden wurde, wollen wir updaten\r\n                // Update sql befehl\r\n                sqlBefehl = \"UPDATE lager SET Bestand = Bestand + \" + stueckzahl + \" WHERE ArtikelName = '\" + artikelname + \"';\";\r\n            }\r\n\r\n            //den sql befehl ausgeben (Testzwecke)\r\n            System.out.println(sqlBefehl);\r\n\r\n            //Datenbank updaten\r\n            PreparedStatement prepEinlagern = db.getConnection().prepareStatement(sqlBefehl);\r\n            int x = prepEinlagern.executeUpdate();\r\n            //Abfragecode oder Fehlercode vom Server\r\n            System.out.println(\"Zurück vom INSERT: \" + x);\r\n\r\n            // Alpha Version. In Beta ( Vollversion ) Ausgabe von einzelnem eingelagerten Produkt.--------\r\n            this.db.showInventory();\r\n            //--------------------------------------------------------------------------------------------\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n\r\n    private void aktualisieren() {\r\n        System.out.print(\"\\033[H\\033[2J\");\r\n        System.out.flush();\r\n        this.db.showInventory();\r\n    }\r\n\r\n    public void auslagern() {}\r\n\r\n    public void filter() {}\r\n\r\n    /**\r\n     * Auswahl Funktion\r\n     */\r\n    public void selectFunction() {\r\n        boolean programRunning = true;\r\n        while (programRunning) {\r\n            System.out.println(\"Funktion bitte auswählen\\n\" +\r\n                    \"1. Einlagerung ins Lager\\n\" +\r\n                    \"2. Auslagern (WIP)\\n\" +\r\n                    \"3. Filtersuche(WIP)\\n\" +\r\n                    \"4. Aktualisieren\\n\" +\r\n                    \"5. Programm Beenden\");\r\n\r\n            Scanner scanner = new Scanner(System.in);\r\n            int eingabeNutzer = scanner.nextInt();\r\n            switch (eingabeNutzer) {\r\n                case 1:\r\n                    System.out.println(\"Sie haben \" + eingabeNutzer + \" ausgewählt: Einlagerung ins Lager\");\r\n                    this.einlagern();\r\n                    break;\r\n\r\n                case 2:\r\n                    System.out.println(\"Sie haben \" + eingabeNutzer + \" ausgewählt: Auslagern (WIP)\");\r\n                    this.auslagern();\r\n                    break;\r\n\r\n                case 3:\r\n                    System.out.println(\"Sie haben \" + eingabeNutzer + \" ausgewählt: Filtersuche (WIP)\");\r\n                    this.filter();\r\n                    break;\r\n\r\n                case 4:\r\n                    System.out.println(\"Sie haben \" + eingabeNutzer + \" ausgewählt: Aktualisieren (WIP)\");\r\n                    this.aktualisieren();\r\n                    break;\r\n\r\n                case 5:\r\n                    System.out.println(\"Sie haben \" + eingabeNutzer + \" ausgewählt: Programm Beenden\");\r\n                    programRunning = false;\r\n                    this.db.closeDatabase();\r\n                    break;\r\n\r\n                default:\r\n                    System.out.println(\"Falsche Zahl eingegeben versuchen Sie es noch einmal Sie schaffen das!!\");\r\n                    // in while schleife packen ;)\r\n                    break;\r\n            }\r\n        }\r\n        System.out.println(\"Programm wurde ordnungsgemäß beendet. ♥♥♥ Auf wiedersehen ♥♥♥\");\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/fm/InventoryManagementSystem/Inventory.java b/src/main/java/de/fm/InventoryManagementSystem/Inventory.java
--- a/src/main/java/de/fm/InventoryManagementSystem/Inventory.java	
+++ b/src/main/java/de/fm/InventoryManagementSystem/Inventory.java	
@@ -46,6 +46,7 @@
                 String beschreibung = x.nextLine();
                 System.out.print("Preis hinzufügen: ");
                 String preis = x.nextLine();
+                // TODO: Preis abfragen evtl wegen int länge Fehler
                 //ersetze beim preis ein , komma direkt zu einem . punkt
                 preis = preis.replace(",", ".");
                 System.out.print("Lagerort hinzufügen: ");
